/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v0/commonapi/JetsonSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createJetsonSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< JetsonSomeIPProxy>(_address, _connection);
}

void initializeJetsonSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:commonapi.Jetson:v0_1:commonapi.Jeston",
        0x7d0, 0x7d1, 0, 1);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "commonapi.Jetson:v0_1",
        &createJetsonSomeIPProxy);
}

INITIALIZER(registerJetsonSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeJetsonSomeIPProxy);
}

JetsonSomeIPProxy::JetsonSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          steering_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x834), CommonAPI::SomeIP::event_id_t(0x5208), CommonAPI::SomeIP::method_id_t(0x835), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
          throttle_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x898), CommonAPI::SomeIP::event_id_t(0x55f0), CommonAPI::SomeIP::method_id_t(0x899), true, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, static_cast< CommonAPI::EmptyDeployment* >(nullptr))
{
}

JetsonSomeIPProxy::~JetsonSomeIPProxy() {
}

JetsonSomeIPProxy::SteeringAttribute& JetsonSomeIPProxy::getSteeringAttribute() {
    return steering_;
}
JetsonSomeIPProxy::ThrottleAttribute& JetsonSomeIPProxy::getThrottleAttribute() {
    return throttle_;
}


void JetsonSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 0;
    ownVersionMinor = 1;
}

std::future<void> JetsonSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace commonapi
} // namespace v0
