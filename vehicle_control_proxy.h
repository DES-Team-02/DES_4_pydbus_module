
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__vehicle_control_proxy_h__PROXY_MARSHAL_H
#define __dbusxx__vehicle_control_proxy_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace team2 {

class VehicleControl_proxy
: public ::DBus::InterfaceProxy
{
public:

    VehicleControl_proxy()
    : ::DBus::InterfaceProxy("com.team2.VehicleControl")
    {
        connect_signal(VehicleControl_proxy, SteeringChanged, _SteeringChanged_stub);
        connect_signal(VehicleControl_proxy, SpeedChanged, _SpeedChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void SetSteering(const int32_t& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << value;
        call.member("SetSteering");
        ::DBus::Message ret = invoke_method (call);
    }

    void SetSpeed(const int32_t& value)
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << value;
        call.member("SetSpeed");
        ::DBus::Message ret = invoke_method (call);
    }


public:

    /* signal handlers for this interface
     */
    virtual void SteeringChanged(const int32_t& newSteering) = 0;
    virtual void SpeedChanged(const int32_t& newSpeed) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _SteeringChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t newSteering;
        ri >> newSteering;
        SteeringChanged(newSteering);
    }
    void _SpeedChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        int32_t newSpeed;
        ri >> newSpeed;
        SpeedChanged(newSpeed);
    }
};

} } 
#endif //__dbusxx__vehicle_control_proxy_h__PROXY_MARSHAL_H
